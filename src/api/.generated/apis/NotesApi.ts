/* tslint:disable */
/* eslint-disable */
/**
 * Notes API
 * API for managing notes
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateNote400Response,
  CreateNoteRequest,
  Note,
  UpdateNote200Response,
} from '../models/index';
import {
    CreateNote400ResponseFromJSON,
    CreateNote400ResponseToJSON,
    CreateNoteRequestFromJSON,
    CreateNoteRequestToJSON,
    NoteFromJSON,
    NoteToJSON,
    UpdateNote200ResponseFromJSON,
    UpdateNote200ResponseToJSON,
} from '../models/index';

export interface CreateNoteOperationRequest {
    createNoteRequest: CreateNoteRequest;
}

export interface DeleteNoteRequest {
    id: string;
}

export interface UpdateNoteRequest {
    id: string;
    createNoteRequest: CreateNoteRequest;
}

/**
 * 
 */
export class NotesApi extends runtime.BaseAPI {

    /**
     * Create a note
     */
    async createNoteRaw(requestParameters: CreateNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Note>> {
        if (requestParameters['createNoteRequest'] == null) {
            throw new runtime.RequiredError(
                'createNoteRequest',
                'Required parameter "createNoteRequest" was null or undefined when calling createNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/note`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNoteRequestToJSON(requestParameters['createNoteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteFromJSON(jsonValue));
    }

    /**
     * Create a note
     */
    async createNote(requestParameters: CreateNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Note> {
        const response = await this.createNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Soft-delete a note
     */
    async deleteNoteRaw(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateNote200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNote200ResponseFromJSON(jsonValue));
    }

    /**
     * Soft-delete a note
     */
    async deleteNote(requestParameters: DeleteNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateNote200Response> {
        const response = await this.deleteNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all notes
     */
    async getAllNotesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Note>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/note`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NoteFromJSON));
    }

    /**
     * Get all notes
     */
    async getAllNotes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Note>> {
        const response = await this.getAllNotesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a note
     */
    async updateNoteRaw(requestParameters: UpdateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateNote200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateNote().'
            );
        }

        if (requestParameters['createNoteRequest'] == null) {
            throw new runtime.RequiredError(
                'createNoteRequest',
                'Required parameter "createNoteRequest" was null or undefined when calling updateNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/note/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNoteRequestToJSON(requestParameters['createNoteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNote200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a note
     */
    async updateNote(requestParameters: UpdateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateNote200Response> {
        const response = await this.updateNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
